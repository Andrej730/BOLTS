from os import listdir,makedirs
from shutil import rmtree,copytree
from blt_parser import load_collection

class OpenSCADExporter:
	def __init__(self,filename):
		self.filename = filename
		self.bases = ["base/conf.scad","base/sketch.scad","base/common.scad"]
		self.tables = []
		self.stubs = []

	def add_collection(self,blt):
		base = blt['scad']['base-file']
		if isinstance(base,str):
			self.bases.append('base/'+base)
		elif isinstance(base,list):
			self.bases += ['base/'+b for b in base]
		else:
			raise TypeError('scad/base-file must be a string or a list of strings')

		parts = blt['parts']
		for part in parts:
			#available arguments and their textual representation
			arguments  = {}

			table_used = 'table' in part.keys() and 'key' in part['target-args']

			#write tables
			if table_used:
				names = part['name']
				if isinstance(names,str):
					names = [names]
				for name in names:
					filename = "tables/%s_table.scad" % name
					self.write_table('output/' + filename, name, part['table'])
					self.tables.append(filename)
				columns = part['table']['columns']
				for col,i in zip(columns,range(len(columns))):
					arguments[col] = 'measures[%d]' % i

			for arg in part['target-args']:
				arguments[arg] = arg
			if 'literal-args' in part.keys():
				for arg,val in part['literal-args'].iteritems():
					arguments[arg] = val

			#write stubs
			base_args = blt['scad']['base-functions'][part['base']]
			for name in names:
				stub = 'module %s(%s){\n' % (name, ', '.join(part['target-args']))
				if table_used:
					stub += '\tmeasures = %s_table(key);\n' % name
					stub += '\tif(measures == "Error"){\n'
					stub += '\t\techo("TableLookUpError in %s");\n\t}\n' % name
				stub += '\t%s(%s);\n}\n\n' % (part['base'],',\n\t\t'.join(arguments[arg] for arg in base_args))
				self.stubs.append(stub)

	#we do not write modification date or similar stuff to keep vcs diffs clean
	def write_file(self):
		fid = open('output/' + self.filename,'w')

		for base in self.bases:
			fid.write('include <%s>\n' % base)
		fid.write("\n")
		for table in self.tables:
			fid.write('include <%s>\n' % table)
		fid.write("\n")
		for stub in self.stubs:
			fid.write(stub)

		fid.close()


	#we do not write modification date or similar stuff to keep vcs diffs clean
	def write_table(self,filename,name,table):
		fid = open(filename,"w")
		cols = table["columns"]
		fid.write("/* Generated by BOLTS, do not modify */\n")

		data = table["data"]
		
		fid.write("function %s_table(key) = \n" % name)
		for k,v in data.iteritems():
			fid.write('key == "%s" ? %s : \n' % (k,str(list(v)).replace("'",'"')))
		fid.write('"Error";\n')

		fid.close()


#clear output
rmtree("output",True)
makedirs("output/tables")
copytree("scad","output/base")

files = listdir('blt')

exporter = OpenSCADExporter("BOLTS.scad")
for file in files:
	if file[-4:] == ".blt":
		print "Processing",file
		coll = load_collection(file)
		exporter.add_collection(coll)

exporter.write_file()
